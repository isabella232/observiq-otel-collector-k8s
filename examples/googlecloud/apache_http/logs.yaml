# yamllint disable rule:line-length
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: observiq-otel-collector
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: observiq-otel-collector
  name: observiq-otel-collector
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - namespaces
      - namespaces/status
      - nodes
      - nodes/spec
      - nodes/stats
      - nodes/proxy
      - pods
      - pods/status
      - replicationcontrollers
      - replicationcontrollers/status
      - resourcequotas
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: observiq-otel-collector
  name: observiq-otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: observiq-otel-collector
subjects:
  - kind: ServiceAccount
    name: observiq-otel-collector
    namespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: observiq-otel-collector
  labels:
    app: observiq-otel-collector
data:
  # This config is inspired by the container log and apache http plugins. It does the following:
  # 1. Read httpd logs from /var/log/containers
  # 2. Detect if docker or containerd format, and parse accordingly
  # 3. Add required resources to map to k8s container monitored resource type (Google Cloud Logging requirement)
  # 4. Parse the actual httpd application log using regex, time, and severity parsers
  collector.yaml: |
    receivers:
      filelog/apache:
        include:
          - /var/log/containers/httpd*.log
        start_at: end
        operators:
          - type: router
            routes:
              - expr: 'body matches "^[^\\s]+ \\w+ .*"'
                output: containerd_parser
            default: docker_parser

          - type: json_parser
            id: docker_parser
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%sZ'
            output: log-to-body

          - id: containerd_parser
            type: regex_parser
            regex: '^(?P<time>[^\s]+) (?P<stream>\w+) (?P<partial>\w)?(?P<log>.*)'
          - type: recombine
            source_identifier: attributes["log.file.name"]
            combine_field: attributes.log
            is_last_entry: "attributes.partial == 'F'"
          - type: remove
            field: attributes.partial
          - id: time_parser_router
            type: router
            routes:
              - output: local_containerd_timestamp_parser
                expr: 'attributes.time != nil and attributes.time matches "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3,9}[\\+-]\\d{2}:\\d{2}"'
              - output: utc_containerd_timestamp_parser
                expr: 'attributes.time != nil and attributes.time matches "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3,9}Z"'
          - type: time_parser
            id: local_containerd_timestamp_parser
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%s%j'
            output: log-to-body
          - type: time_parser
            id: utc_containerd_timestamp_parser
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%sZ'
            output: log-to-body

          - type: move
            id: log-to-body
            from: attributes.log
            to: body

          - type: regex_parser
            regex: '^(?P<pod>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?P<namespace>[^_]+)_(?P<container>.+)-'
            parse_from: attributes["log.file.name"]
            cache:
              size: 500

          - type: move
            from: attributes.pod
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.container
            to: resource["k8s.container.name"]

          # From https://github.com/observIQ/observiq-otel-collector/blob/main/plugins/apache_http_logs.yaml
          - type: regex_parser
            regex: '^(?P<remote_addr>[^ ]*) (?P<remote_host>[^ ]*) (?P<remote_user>[^ ]*) \[(?P<timestamp>[^\]]*)\] "(?P<method>\S+) +(?P<path>[^ ]*)( (?P<protocol>[^/]*)/(?P<protocol_version>[^\"]*)|[^\"]*)?" (?P<status>[^ ]*) (?P<body_bytes_sent>[^ ]*)(?: "(?P<http_referer>[^\"]*)" "(?P<http_user_agent>[^\"]*)"(?:\s+(?P<http_x_forwarded_for>[^ ]+))?)?'
            parse_from: body
            parse_to: body
            timestamp:
              parse_from: body.timestamp
              layout: '%d/%b/%Y:%H:%M:%S %z'
            severity:
              parse_from: body.status
              preset: none
              mapping:
                info: 2xx
                info2: 3xx
                warn: 4xx
                error: 5xx

    processors:
      resource:
        attributes:
        - key: k8s.cluster.name
          value: "${OTEL_RESOURCE_ATTRIBUTES_CLUSTER_NAME}"
          action: upsert

      # Google requires k8s.cluster.name, cloud.region, cloud.availability_zone and
      # cloud.platform in order to map to container, pod, node, and cluster resource types.
      resource/mapping:
        attributes:
        - key: cloud.region
          value: us-east1
          action: insert
        - key: cloud.availability_zone
          value: us-east1-b
          action: insert
        - key: cloud.platform
          value: gcp_kubernetes_engine
          action: insert

      batch:
        send_batch_max_size: 200
        send_batch_size: 200
        timeout: 1s

    exporters:
      googlecloud:
      logging:

    service:
      pipelines:
        logs:
          receivers:
            - filelog/apache
          processors:
            - resource
            - resource/mapping
            - batch
          exporters:
            - googlecloud
            - logging
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: observiq-otel-collector
  labels:
    app: observiq-otel-collector
spec:
  selector:
    matchLabels:
      app: observiq-otel-collector
  template:
    metadata:
      labels:
        app: observiq-otel-collector
    spec:
      containers:
        - args:
            - --config=/conf/collector.yaml
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /otel/credentials.json
            - name: OTEL_RESOURCE_ATTRIBUTES_CLUSTER_NAME
              value: apache
            - name: OTEL_RESOURCE_ATTRIBUTES_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          image: observiq/observiq-otel-collector:1.9.2
          imagePullPolicy: IfNotPresent
          name: otc-container
          resources:
            requests:
              cpu: 250m
              memory: 250Mi
          volumeMounts:
            - mountPath: /conf
              name: otc-internal
            - mountPath: /var/log
              name: varlog
            - mountPath: /var/lib/docker/containers
              name: dockerlogs
            - mountPath: /var/lib/observiq/otelcol/node
              name: storage
            - mountPath: /otel/credentials.json
              name: gcp-credentials
              subPath: credentials.json
      dnsPolicy: ClusterFirstWithHostNet
      # Required for k8sattributes processor
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        # Must be able to mount host volume and read logs
        # from filesystem and journald.
        runAsUser: 0
      serviceAccount: observiq-otel-collector
      serviceAccountName: observiq-otel-collector
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            items:
              - key: collector.yaml
                path: collector.yaml
            name: observiq-otel-collector
          name: otc-internal
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: dockerlogs
        - hostPath:
            path: /var/lib/observiq/otelcol/node
            type: ""
          name: storage
        - name: gcp-credentials
          secret:
            defaultMode: 420
            secretName: gcp-credentials
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
