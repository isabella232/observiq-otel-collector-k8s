# yamllint disable rule:line-length
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: observiq-otel-collector
  namespace: observiq
  labels:
    app: observiq-otel-collector
data:
  collector.yaml: |
    receivers:
      plugin/kubelet:
        path: /etc/otel/plugins/kubelet_logs.yaml

      plugin/container:
        path: /etc/otel/plugins/container_logs.yaml
        parameters:
          log_source: file

    processors:
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        pod_association:
        - from: resource_attribute
          name: k8s.pod.uid
        - from: resource_attribute
          name: k8s.pod.name
        filter:
          node_from_env_var: ${KUBE_NODE_NAME}

      resource:
        attributes:
        - key: k8s.cluster.name
          value: "${K8S_CLUSTER}"
          action: upsert

      # Google requires k8s.cluster.name, cloud.region, cloud.availability_zone and
      # cloud.platform in order to map to container, pod, node, and cluster resource types.
      resource/mapping:
        attributes:
        - key: cloud.region
          value: us-east1
          action: insert
        - key: cloud.availability_zone
          value: us-east1-b
          action: insert
        - key: cloud.platform
          value: gcp_kubernetes_engine
          action: insert

      # Logs: Preserve resource labels that are discarded after mapping to
      # google monitored resource type. The following are preserved by
      # google exporter log pipelines:
      #     -> k8s.cluster.name: STRING(google-poc)
      #     -> k8s.container.name: STRING(otc-container)
      #     -> k8s.namespace.name: STRING(default)
      #     -> k8s.pod.name: STRING(observiq-node-collector-46r2h)
      # The following should be moved to labels
      #     -> k8s.deployment.name: STRING(observiq-node)
      #     -> k8s.node.name: STRING(minikube)
      #     -> k8s.pod.start_time: STRING(2022-07-18 19:02:31 +0000 UTC)
      #     -> k8s.pod.uid: STRING(82aa9f33-f049-4d6f-b329-a8bf3ef4d819)
      #     -> container.image.name: STRING(bmedora/observiq-otel-collector-amd64)
      #     -> container.image.tag: STRING(k8s-dev.0)
      # logstransform/k8spodlabels:
      #   operators:
      #     - type: move
      #       if: resource["k8s.deployment.name"] != nil
      #       from: resource["k8s.deployment.name"]
      #       to: attributes["k8s.deployment.name"]
      #     - type: move
      #       if: resource["k8s.node.name"] != nil
      #       from: resource["k8s.node.name"]
      #       to: attributes["k8s.node.name"]
      #     - type: move
      #       if: resource["k8s.pod.start_time"] != nil
      #       from: resource["k8s.pod.start_time"]
      #       to: attributes["k8s.pod.start_time"]
      #     - type: move
      #       if: resource["k8s.pod.uid"] != nil
      #       from: resource["k8s.pod.uid"]
      #       to: attributes["k8s.pod.uid"]
      #     - type: move
      #       if: resource["container.image.name"] != nil
      #       from: resource["container.image.name"]
      #       to: attributes["container.image.name"]
      #     - type: move
      #       if: resource["container.image.tag"] != nil
      #       from: resource["container.image.tag"]
      #       to: attributes["container.image.tag"]

      batch:
        send_batch_max_size: 1000
        send_batch_size: 1000
        timeout: 2s

    exporters:
      googlecloud:
      logging:

    extensions:
      file_storage:
        directory: /var/lib/observiq/otelcol/node

    service:
      extensions:
        - file_storage
      pipelines:
        logs:
          receivers:
            - plugin/kubelet
            - plugin/container
          processors:
            - k8sattributes
            - resource
            - resource/mapping
            # - logstransform/k8spodlabels
            - batch
          exporters:
            - googlecloud
            - logging
